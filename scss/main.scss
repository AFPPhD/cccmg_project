$colour-scheme: (
	blue: (
		PRIMARY-COLOUR: #4F94CD,
		BACKGROUND-COLOUR: #204c75
	),

	green: (
		PRIMARY-COLOUR:	#49b293,
		BACKGROUND-COLOUR: #02443b
	),

	red: (
		PRIMARY-COLOUR: #f02e2e,
		BACKGROUND-COLOUR: #b03532
	),

	orange: (
		PRIMARY-COLOUR: #fc9d50,
		BACKGROUND-COLOUR: #f37f32
	)
);

$colour-scheme-higher-contrast: (
	blue: (
		PRIMARY-COLOUR: #3279B3,
		BACKGROUND-COLOUR: #204c75
	),

	green: (
		PRIMARY-COLOUR:	#35826B,
		BACKGROUND-COLOUR: #02443b
	),

	red: (
		PRIMARY-COLOUR: #EC0404,
		BACKGROUND-COLOUR: #b03532
	),

	orange: (
		PRIMARY-COLOUR: #BE5A09,
		BACKGROUND-COLOUR: #a95108
	)
);

// TODO: Other Colours need defining like text colour, plus need custom variables for colour schemes!


// Function for tidier version of nested map-get();
@function setcolour($map, $colour, $property) {
	@return map-get(map-get($map, $colour), $property);
}


// Create SASS variables list
// body {
// 	@each $colour, $property in $colour-scheme {
// 		#{'$'+$colour}-fg: #{setcolour($colour-scheme,$colour,PRIMARY-COLOUR)};
// 		#{'$'+$colour}-bg: #{setcolour($colour-scheme,$colour,BACKGROUND-COLOUR)};
// 	}
// }


// Create custom properties list version

	:root {

		// Non-text Colour Scheme

		@each $colour, $property in $colour-scheme-higher-contrast {
			--#{$colour}-fg: #{setcolour($colour-scheme-higher-contrast,$colour,PRIMARY-COLOUR)};
			--#{$colour}-bg: #{setcolour($colour-scheme-higher-contrast,$colour,BACKGROUND-COLOUR)};
		}
		--menu-height: 536px; // Default non-js small devices navigation bar height
		--thumb: #3279B3; // Default thumb colour for Firefox custom scrollbar
		--scrollbar: #204c75; // Default background colour for Firefox custom scrollbar
	}

	// Default High Contrast Blue needs implementing to override normal default Blue ?

	// .navigation, .container, .topbar, .select-option {
	// 	background-color: #3279B3;
	// }

	h2, h3 {
		border-bottom: 2px solid #ffffff;
	}

	// Text colours

	p, .complab, .update, .composers, .tablekey {
		color: #ffffff;
	}



		@supports (prefers-contrast(no-preference)) {

		:root {

			// Non-text Colour Scheme

			@each $colour, $property in $colour-scheme {
				--#{$colour}-fg: #{setcolour($colour-scheme,$colour,PRIMARY-COLOUR)};
				--#{$colour}-bg: #{setcolour($colour-scheme,$colour,BACKGROUND-COLOUR)};
			}
			--thumb: #4F94CD;
		}

		// Default High Contrast Blue needs implementing.
		// Have to re-apply normal Blue. Done this way so browsers/devices not understanding prefers-contrast
		// will have colour schemes of high contrast as default

		.navigation, .container, .topbar, .select-option {
			background-color: #4F94CD;
		}

		// Text colours

		p, .tablekey {
			color: #e6e6e6;
		}

		.complab, .update, .composers {
			color: #FFD700;
		}

	}


// @include var everywhere need the colour change (i.e static colour such as gold for the bands)
@mixin var ($property, $value) {
	#{$property}: map-get($colours: $value);	// Fallback value
	#{$property}: var(#{$value});
}


// @mixin FontSizeRecalculation () {
	// p {
		// font-size: min(max(1.375rem, 1.2697rem + 0.5263vw), 1.5rem); // Fallback
		// font-size: clamp(1.375rem, 1.2697rem + 0.5263vw, 1.5rem);
		// font-size: clamp(1.375rem, 1.2426470588235294rem + 0.5882352941176471vw, 1.5rem);
		// min-height: 0vw; // Safari Fix

		// font-size: calc(22px + (24 - 22) * (100vw - 320px) / (700 - 320)); // Can't use @function inside @mixin
		// font-size: calc(1.375rem + (1.5 - 1.375) * ((100vw - 20rem) / (43.75 - 20)));
	// }

	// font-size: calc(22px + (24 - 22) * (100vw - 320px) / (700 - 320)); Fallback for browsers that can't evaluate ems
	// Use e.g @media (min-width: 20em) instead of min-width: 320px) for all media queries
    // 	font-size: calc(1.375rem + (1.5 - 1.375) * ((100vw - 20rem) / (43.75 - 20)));
	// Minimum font size in rem because % fails in IE and Edge
// }

	// Safari below version 8 and in Internet Explorer below 11, viewport units when used in a calc() expression
	// are not re-evaluated when the browser window is resized. Need to recalculate the font size at set breakpoints
    // min-height: 0vw;	Fix for Safari 11, which makes font scale on screen resize as well as page reload


@mixin MediaQueryStyle ($navbarvisibility: false, $containerfullscreen: false) {

	@if $navbarvisibility == true {
		.navigation {
			display: block;
		}
	} @else {
		.navigation {
			display: none;
		}
	}

	@if $containerfullscreen == true {
		// @supports (margin-left: -50vw) {		IE does not support @supports so don't use @supports not

		.container {
			left: 50%; 			// Push the container to the exact middle of the browser window
			margin-left: -50vw; // and then pull it back to the left edge with negative -50vw margin
		}
	} @else {
		.container {
			left: 0%;
			margin-left: auto;
		}
	}
}

@include MediaQueryStyle (false, true);		// Can't use @extend to include the code in a media query
											// TODO: Need MediaQueryStyle here, before (min-width: 1px) or in (max-width: 319px) before ?

// @include FontSizeRecalculation();



// Menu for small devices styles

// .topbar {
// 	//text-align: unset; // Stop centre align span text for larger devices
// 	//width: auto;
// 	//min-width: 680px;
// 	// margin-left: 1%;
// 	// margin-right: 1%;
// 	//width: fit-content;
// 	//width: 100%;
// }

.topbar > a { // Changed from .topbar a, as padding setting increased the navigation link padding, resulting in colour button downshift !
	text-decoration: none; // Stop link underline
	display: inline-block;
	border: 3px solid transparent; // So 3px black border will just overlay this, with no element shift
	padding: 0 7px; // Space out more horizontally outline
	margin-left: 1%;
	position: relative;
	color: black;
	//float: left;
	// margin-left: 20%;
}

.topbar span {
	//display: none;
	position: relative;
	font-size: 1.16em; // To level Shortcuts text with Hamburger Icon
	//right: 50%;
	//margin-left: 40%;
	//padding-left: 64%;
	//padding-right: 8px;
	//float: none;
	//overflow: hidden;
}

input[type="checkbox"] {
	opacity: 0; // Can't use display:none or visibility: hidden because keyboard users will not able to interact with it via space bar
} 			    // since the checkbox cannot now receive focus


// Hide the checkmark by default
// .checkbox input[type="checkbox"] + label::after {
//     content: none;
// }

label.checkbtn {
	//display: none;
	//position: relative;
	//font-size: 1.5rem; // Made Hamburger icon same size as text and icon left
	cursor: pointer;
	border: 3px solid transparent; // So 3px black border will just overlay this, with no element shift
	padding: 0 4px; // Space out more horizontally outline
	//outline-offset: 4px;
	//line-height: 1.5;
	//float: right;
}

.background {
	display:none;
}

@media screen and (max-width: 1041px) { // Menu Bar for small devices

	.topbar {
		//text-align: unset; // Stop centre align span text for larger devices
		width: auto;
		//width: 100%;
		min-width: 680px;
		// margin-left: 1%;
		// margin-right: 1%;
		//width: fit-content;
		//width: 100%;
	}

	.topbar a {
		//margin-left: 1%;
	}

	.topbar span {
		//left:62%;
		//margin-left: 59.75%; //680px
		//margin-left: 62.35%; //700px
		//position: fixed;
		position: absolute; // Stop Shortcuts text moving around
		right: 5.5%; // TODO: 700/720 px media tweak
	}

	// .topbar span, .checkbtn {
	// 	display: inline-block; // Enable with javascript (BUT only for up to 1041px!), as otherwise won't work for keyboard users
	// }

	label.checkbtn {
		//left: 62.25%;
		//margin-left: -3.85%; //680px
		//margin-left: 0.4% //700px
		//position: fixed;
		position: absolute; // Stop Hamburger Menu moving around
		right: 1.15%;
	}

	.navigation {
		//--menu-height: 590px;
		// display: flex;
		// align-items: center;
		// display: grid;
    	// place-items: center;
		// margin: auto 0;
		//top: 100px;
		//float: none;
		//width: 98%;
		// left: 50%;
		// margin-left: -50%;
		// width: 9.375rem;
		//top: 65px;
		// max-height: --menu-height;
		//overflow-y: auto !important;
		//overscroll-behavior-y: contain;
		top: 42.5px;
		//top: calc((100vh - var(--menu-height))/2 + 6px);
		// top: 10vh;
		// top: 50%;
		// transform: translate(0, -50%);
		height: 536px;
		// padding-top: 6px;
		// padding-right: 3px;
		// padding-left: 3px;
		padding: 6px 3px 0;
		//position: absolute; // Need to keep for background to remain blurred (THIS AND/OR OTHER position: absolute #toggle:checked ~ .background) ???
		//z-index: 2;
   		left: 50%;
		//top: 50vh;
		//vertical-align:middle;
   		transform: translate(-50%, 0);
		min-width: 360px;
		//min-height: 320px;
		//max-height: 380px;
		//max-height: 15%;
		display: none;
	}

	@media screen and (max-height: 639px) {
		.navigation {
			//scrollbar-gutter: stable;
			//max-height: var(--menu-height) +6px;
			max-height: 84%; // In order to scroll to Colour menu needed to reduce this from 100%
            overflow-y: overlay;
			overflow-x: hidden;
		}
	}

	@media screen and (min-height: 641px) {
		.navigation {
			//--menu-height: 590px;
			top: calc((100vh - (var(--menu-height) + 6px))/2);
		}
	}


	.navigation h3 {
		display: none; // Remove Shortcuts header from small devices dropdown menu
	}

	.navigation ul {
		//margin: 0;
		//padding: 0;
		display: flex;
		flex-direction: column;
		align-items: center;
		font-size: 0.75rem;
		//column-gap: 10em;
		//justify-content: space-between;
		//max-height: 100%;
	}

	.navigation a:link, .navigation a:visited {
		min-width: 360px; //Was 360px;
		border: 2px solid white;
		margin: 0.45% auto;
	}

	.bv_ul_inner.bv_background {
		margin-top: -67px;
		display: none; /* Colour Menu stays hidden on first main menu open */
	}

	// .navigation:focus-within {
	// 	display: block;
	// 	border: 2px solid green;
	// }

	// .checkbtn:not(:focus) + .navigation {
	// 	display: none;
	// }

	label.checkbtn::before {
		content: "\2630"; // Hamburger Icon
		//position: absolute;
		display: inline-block;
		height: 0.7em;
		width: 0.9em;
		//background: purple;
	}

	input[type="checkbox"]:focus + label.checkbtn { // Had to remove #toggle off front of selector, so that Hamburger menu highlighted
		border: 3px solid black; // outline results in top line disappearing
	}

	.topbar a:focus {

		outline: 0; // Remove outline style set in navigation.css because overriding with border
		// outline: transparent; // Set the outline color to be transparent, so that the outline is invisible when not in high
									// contrast mode, but overridden correctly in high contrast mode
		border: 3px solid black; // outline results in top line disappearing so use border
	}

	// #toggle.input[type="checkbox"]:checked + label::after {
	// 	background: orange;
	// }

	#toggle:checked ~ .navigation {  // Open nav menu for mouse click
		display: block;
		//z-index: 5;
		// background-color: rgba(0,0,0,0.5);
		// backdrop-filter: blur(15px);
		// opacity: 0.9;
		//position: relative;
		//background-color: black;
		//backdrop-filter: blur(10px);
		//max-height: --menu-height;
	}


	//@supports selector(:has(*)) {
		//.dropdownbackground:has(div.topbar > input[type="checkbox"]:checked) {
			#toggle:checked ~ .background {
				//background: rgba(255,255,255,0.5);
				//background-color: rgba(0,0,0,0.5);
				display: block;
				//position: fixed;
				position: absolute; // Changed from fixed to absolute to stop inconsistent behaviour  of blur background
				// filter: blur(15px);
  				// -webkit-filter: blur(15px);
				/* Center and scale the image nicely */
				// left: 0;
  				// top: 0;
				width: 100%;
				// background-position: center;
				// background-repeat: no-repeat;
				// background-size: cover;
				//height: 100%;
				//height: 100vh; // TODO: Change this because of problems with mobiles?  e.g min-height: calc(100vh - 42px)
				min-height: 100vh; // Part of mobile 100vh height problem fix
				// width: 100%;
				//backdrop-filter: blur(10px);
			}


			div.topbar:has(#toggle:checked) { border-radius: 0; } // Remove wrong colour .topbar edges when there is blurred  background

			.blur {
				background: rgba(255, 255, 255, 0.2); // Make sure this color has an opacity of less than 1
				-webkit-backdrop-filter: blur(5px);
				backdrop-filter: blur(5px); // This be the blur
				//height: 100%;
				//height: 100vh; // TODO: Change this because of problems with mobiles? e.g min-height: calc(100vh - 80px)
				min-height: 100vh; // Part of mobile 100vh height problem fix
				width: 100%;
			}
	//}

}

@media screen and (min-width: 1042px) and (max-height: 739px) { // Changed from 738px, due to offset change for .navigation from 68 to 69px
	.navigation {
		max-height: 78.5%; // In order to scroll to Colour menu needed to reduce this from 100%
		overflow-y: overlay;
		overflow-x: hidden;
	}
}

// @media screen and (min-width: 686px) and (max-width: 1041px) {
// 	.topbar a {
// 		//margin-left: 1%;
// 	}

// 	.topbar span {
// 		position : fixed;
// 		//margin-left: 59.75%;
// 		//margin-left: 60.75%;
// 		right: 6.5%;
// 	}

// 	// .topbar span, .checkbtn {
// 	// 	display: inline-block; // Enable with javascript (BUT only for up to 1041px!), as otherwise won't work for keyboard users
// 	// }

// 	.checkbtn {
// 		position: fixed;
// 		//margin-right: 1%;
// 		//margin-right: 1%;
// 		right: 1.15%;
// 	}
// }

@media screen and (min-width: 1042px) {

	.topbar {
		text-align:center; // Aligns span child
	}

	.topbar a:focus {
		outline: 0; // Remove outline style set in navigation.css because overriding with border
		//outline: transparent; // Set the outline color to be transparent, so that the outline is invisible when not in high
									// contrast mode, but overridden correctly in high contrast mode
		border: 3px solid black; // outline results in top line disappearing
		// margin-bottom: 10px;
	}

	.topbar span, .checkbtn {
		display: none;
	}
}



/*@media screen and (max-height: 807px) { // Was 795px. Stop Colour Change button and therefore menu not fitting on for limited vertical height
	#main_CustomBuild, .bv_mainselect, .bv_ul_inner.bv_background {
		display: none !important; // !important needed to hide left over menu (.bv_ul_inner.bv_background) - Belt and Braces!
	}
	.navigation {
		height: 610px !important; // Was 536px // TODO: Cases for Cascade Layers!
	}
}*/

// @media only screen and (max-width: 275px) { // Trying to force horizontal scroll i.e Stop further shrinkage
// 	body {
// 		// display: block;
// 		// width: 100% !important;
// 		white-space: nowrap; // Force overlap - but on single line!
// 		// text-overflow: ellipsis;
// 		// width: 275px;
// 		// width: 550px;
// 		// width: 275px;
// 		// height:13077px;
// 	}
// 	.container {
// 		width: 550px;
// 		.pngtitle img { 	// Stop Title shrinking
// 			min-height: 118px;
// 			min-width: 550px;
// 		}
// 		ul.accordion h4 {	// Stop bands shrinking
// 			width:98%;
// 		// overflow-wrap: break-word;
// 		// text-overflow: ellipsis;
// 		}
// 	}
// }



@media only screen and (max-width: 359px) {

	.container {
		// width: 319px; // min-width stops reflow
		// min-width: 45ch;
		// h4 {
		// 	font-size: 1rem; // Stop band text leaking out. TODO: Change default?
		// }
		// table {
		// 	max-width: 100%;
		// }
		letter-spacing: 0.05em; // Make text more readable at lower font sizes
		//width: 200%;
		// height: 5242px; // Maintains aspect ratio. Use instead of resize - makes text flow to next line as width decreases
		// left: 0%;
		// margin: auto;
		// width: 100%;
		// max-width: 100%; // Stops text shrink with fixed height 5242px - Flows to next line instead. Without or with min-width, no flow just shrinks
		// height: 100%;
		// min-width: 100vw;
		// word-wrap: break-word;
		// overflow-wrap: break-word;
		// text-overflow: ellipsis;
		//max-width: 680px; // min-width and width 100% to stop resize ?

		// margin-left: -50%; ?

		// width: fit-content;
		//overflow: hidden; // Need a non-visible option for resize to work
		// white-space: nowrap;
		//resize: none; // Keeps container at 100% body width, for 200% solution, while browser size decreases
		// overflow-x:scroll;
		// text-overflow: ellipsis;

	}
}



// @media only screen and (min-width: 320px) and (max-width: 419px) {

	// .container {
	// 	background: #af1818; // red
	// }


	//@include MediaQueryStyle (false, true);

	// include FontSizeRecalculation ();

	// p {
		// word-break: break-word; for Samsung browser. word-break: break-word - For non English content i.e Chinese, Japanese, and Korean. Will only create a break if an entire word cannot be placed on its own line without overflowing

		// overflow-wrap: break-word; (Or  word-wrap) Applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string

		// -webkit-hyphens: none;
		//     -ms-hyphens: none;
		// 	       hyphens: none;
	// }

	// TODO: Max chars per line ? Below 170px need to create overflow

	h5 {
		// font-size: 1.4rem; Change until =<420px
		// font-size: calc(1rem + (1.1 - 1.4) * (100vw - 320px) / (420 - 320));
	}

	// ul.accordion p {
		// line-height: 1.7;
		// font-size: 1.3rem; Change until =<420px. Band text is too small!
		// font-size: calc(1rem + (1 - 1.3) * (100vw - 320px) / (420 - 320));
	// }

	// .update {
	// 	font-size: 1.4rem; /* Put 1.4rem size in cccmg.css */
	// }
// }

// @media only screen and (min-width: 420px) { // min/max width is the Viewport width (innerwidth) not the window width (outerwidth)

		// .container {
		//  		background: #af4f18; // dark orange
		// }

// Media queries for h4, h5, ul.accordion.p and .update to resize back to normal proportions

	// h4 {
	// 	font-size: 1.22rem;
	// }

	// h5 {
	// 	font-size: 1.1rem; // TODO: Increase until =<420px
	// }

	// ul.accordion p {
	// 	// line-height: 1.7;
	// 	font-size: 1rem; TODO: Increase until =<420px. Band text is too small!
	// }
// }

// @media only screen and (min-width: 480px) {

// 	// .container {
// 	// 	background: #a70ed6; // purple
// 	// }

// 	@include MediaQueryStyle (false, true);
// }

@media screen and (max-width: 1041px) {	// Don't use both min and max width media queries to avoid No Man's Land ?

	// .container {
	// 	background: #328f1b; // green
	// }

	@include MediaQueryStyle (false, false);

	#toggle:checked ~ .navigation {
		display: block; // Undo removal by MediaQueryStyle, meant for just .navigation as sidebar
	}
	// body {
	// 	font-size: 24px;
	// 	font-size: 150%;
	// }
}

@media screen and (min-width: 1042px) {

	// .container {
	// 	background: #4F94CD; // light blue
	// }

	@include MediaQueryStyle (true, false);
}

@media screen and (min-width: 1921px) {

	// .container {
	// 	background: #d43095; // pink
	// }

	// @include MediaQueryStyle (true, false); Not needed, set at min-width: 1042px
}