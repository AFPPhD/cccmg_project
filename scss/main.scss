$colour-scheme: (
	blue: (
		PRIMARY-COLOUR: #4F94CD,
		BACKGROUND-COLOUR: #204c75
	),

	green: (
		PRIMARY-COLOUR:	#49b293,
		BACKGROUND-COLOUR: #078531
	),

	red: (
		PRIMARY-COLOUR: #f02e2e,
		BACKGROUND-COLOUR: #b03532
	),

	orange: (
		PRIMARY-COLOUR: #fc9d50,
		BACKGROUND-COLOUR: #f37f32
	)
);


// Function for tidier version of nested map-get();
@function setcolour($map, $colour, $property) {
	@return map-get(map-get($map, $colour), $property);
}


// Create SASS variables list
// body {
// 	@each $colour, $property in $colour-scheme {
// 		#{'$'+$colour}-fg: #{setcolour($colour-scheme,$colour,PRIMARY-COLOUR)};
// 		#{'$'+$colour}-bg: #{setcolour($colour-scheme,$colour,BACKGROUND-COLOUR)};
// 	}
// }


// Create custom properties list version
:root {
	@each $colour, $property in $colour-scheme {
		--#{$colour}-fg: #{setcolour($colour-scheme,$colour,PRIMARY-COLOUR)};
		--#{$colour}-bg: #{setcolour($colour-scheme,$colour,BACKGROUND-COLOUR)};
	}
}


// @include var everywhere need the colour change
@mixin var ($property, $value) {
	#{$property}: map-get($colours: $value);	// Fallback value
	#{$property}: var(#{$value});
}


@mixin FontSizeRecalculation () {
	p {
		// font-size: min(max(1.375rem, 1.2697368421052633rem + 0.5263157894736842vw), 1.5rem); // Fallback
		// font-size: clamp(1.375rem, 1.2697rem + 0.5263vw, 1.5rem);
		// font-size: clamp(1.375rem, 1.2426470588235294rem + 0.5882352941176471vw, 1.5rem);
		// min-height: 0vw; // Safari Fix

		// font-size: calc(22px + (24 - 22) * (100vw - 320px) / (700 - 320)); // Can't use @function inside @mixin
		// font-size: calc(1.375rem + (1.5 - 1.375) * ((100vw - 20rem) / (43.75 - 20)));
	}

	// font-size: calc(22px + (24 - 22) * (100vw - 320px) / (700 - 320)); Fallback for browsers that can't evaluate ems
	// Use e.g @media (min-width: 20em) instead of min-width: 320px) for all media queries
    // 	font-size: calc(1.375rem + (1.5 - 1.375) * ((100vw - 20rem) / (43.75 - 20)));
	// Minimum font size in rem because % fails in IE and Edge
}

	// Safari below version 8 and in Internet Explorer below 11, viewport units when used in a calc() expression
	// are not re-evaluated when the browser window is resized. Need to recalculate the font size at set breakpoints
    // min-height: 0vw;	Fix for Safari 11, which makes font scale on screen resize as well as page reload


@mixin MediaQueryStyle ($navbarvisibility: false, $containerfullscreen: false) {

	@if $navbarvisibility == true {
		.navigation {
			display: block;
		}
	} @else {
		.navigation {
			display: none;
		}
	}

	@if $containerfullscreen == true {
		// @supports (margin-left: -50vw) {		IE does not support @supports so don't use @supports not

		.container {
			left: 50%; 			// Push the container to the exact middle of the browser window
			margin-left: -50vw; // and then pull it back to the left edge with negative -50vw margin
		}
	} @else {
		.container {
			left: 0%;
			margin-left: auto;
		}
	}
}

@include MediaQueryStyle (false, true);		// Can't use @extend to include the code in a media query
											// Need MediaQueryStyle here, before (min-width: 1px) or in (max-width: 319px) before

// @include FontSizeRecalculation();

@media screen and (max-height: 795px) { // Stop Colour Change button and therefore menu not fitting on for limited vertical height
	#main_CustomBuild, .bv_ul_inner.bv_background {
		display: none !important; // !important needed to hide left over menu (.bv_ul_inner.bv_background) - Bolts and Braces!
	}
	.navigation {
		height: 536px !important; // TODO: Cases for Cascade Layers!
	}
}

@media screen and (max-width: 275px) { // Trying to force horizontal scroll i.e Stop further shrinkage
	body {
		// display: block;
		// width: 100% !important;
		// overflow-x: scroll;
		white-space: nowrap; // Force overlap - but on single line!
		// text-overflow: ellipsis;
		// width: 275px;
		// width: 550px;
		// width: 275px;
		// height:13077px;
	}
	.container {
		width: 550px;
		.pngtitle img { 	// Stop Title shrinking
			min-height: 118px;
			min-width: 550px;
		}
		ul.accordion h4 {	// Stop bands shrinking
			width:98%;
		// overflow-wrap: break-word;
		// text-overflow: ellipsis;
		}
	}
}



@media screen and (max-width: 359px) {
	.container {
		// width: 319px; // min-width stops reflow
		// min-width: 45ch;
		// h4 {
		// 	font-size: 1rem; // Stop band text leaking out. TODO: Change default?
		// }
		// table {
		// 	max-width: 100%;
		// }
		letter-spacing: 0.05em; // Make text more readable at lower font sizes
		width: 200%;
		// height: 5242px; // Maintains aspect ratio. Use instead of resize - makes text flow to next line as width decreases
		// left: 0%;
		// margin: auto;
		// width: 100%;
		// max-width: 100%; // Stops text shrink with fixed height 5242px - Flows to next line instead. Without or with min-width, no flow just shrinks
		// height: 100%;
		// min-width: 100vw;
		// word-wrap: break-word;
		// overflow-wrap: break-word;
		// text-overflow: ellipsis;
		max-width: 680px;

		margin-left: -50%;

		// width: fit-content;
		overflow: hidden; // Need a non-visible option for resize to work
		// white-space: nowrap;
		resize: none; // Keeps container at 100% body width, for 200% solution,  while browser size decreases
		// overflow-x:scroll;
		// text-overflow: ellipsis;

	}
}



@media only screen and (min-width: 320px) and (max-width: 419px) {

	// .container {
	// 	background: #af1818; // red
	// }


	//@include MediaQueryStyle (false, true);

	// include FontSizeRecalculation ();

	// p {
		// word-break: break-word; for Samsung browser. word-break: break-word - For non English content i.e Chinese, Japanese, and Korean. Will only create a break if an entire word cannot be placed on its own line without overflowing

		// overflow-wrap: break-word; (Or  word-wrap) Applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string

		// -webkit-hyphens: none;
		//     -ms-hyphens: none;
		// 	       hyphens: none;
	// }

	// TODO: Max chars per line ? Below 170px need to create overflow

	h5 {
		// font-size: 1.4rem; Change until =<420px
		// font-size: calc(1rem + (1.1 - 1.4) * (100vw - 320px) / (420 - 320));
	}

	ul.accordion p {
		// line-height: 1.7;
		// font-size: 1.3rem; Change until =<420px. Band text is too small!
		// font-size: calc(1rem + (1 - 1.3) * (100vw - 320px) / (420 - 320));
	}

	// .update {
	// 	font-size: 1.4rem; /* Put 1.4rem size in cccmg.css */
	// }
}

@media only screen and (min-width: 420px) { // min/max width is the Viewport width (innerwidth) not the window width (outerwidth)

		// .container {
		//  		background: #af4f18; // dark orange
		// }

// Media queries for h4, h5, ul.accordion.p and .update to resize back to normal proportions

	// h4 {
	// 	font-size: 1.22rem;
	// }

	// h5 {
	// 	font-size: 1.1rem; // TODO: Increase until =<420px
	// }

	// ul.accordion p {
	// 	// line-height: 1.7;
	// 	font-size: 1rem; TODO: Increase until =<420px. Band text is too small!
	// }
}

@media only screen and (min-width: 480px) {

	// .container {
	// 	background: #a70ed6; // purple
	// }

	@include MediaQueryStyle (false, true);
}

@media only screen and (min-width: 700px) {	// Don't use both min and max width media queries to avoid No Man's Land ?

	// .container {
	// 	background: #328f1b; // green
	// }

	@include MediaQueryStyle (false, false);

	// body {
	// 	font-size: 24px;
	// 	font-size: 150%;
	// }
}

@media only screen and (min-width: 1042px) {

	// .container {
	// 	background: #4F94CD; // light blue
	// }

	@include MediaQueryStyle (true, false);
}

@media only screen and (min-width: 1921px) {

	// .container {
	// 	background: #d43095; // pink
	// }

	@include MediaQueryStyle (true, false);
}